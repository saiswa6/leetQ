// Using Reentrant Locks and volatile variable
class ZeroEvenOdd {
        private int n;
        private Lock lock;
        private Condition zero, odd, even;
        private volatile int currState;
        private final int ZERO, EVEN, ODD;

        public ZeroEvenOdd(int n) {
            this.n = n;
            this.lock = new ReentrantLock();
            this.zero = lock.newCondition();
            this.odd = lock.newCondition();
            this.even = lock.newCondition();
            this.ZERO = 0;
            this.EVEN = 2;
            this.ODD = 1;
            this.currState = ZERO;
        }

        // printNumber.accept(x) outputs "x", where x is an integer.
        public void zero(IntConsumer printNumber) throws InterruptedException {
            for (int i = 1; i <= n; i++) {
                lock.lock();
                try {
                    if (currState != ZERO)
                        zero.await();

                    printNumber.accept(0);
                    if (i % 2 == 0) {
                        currState = EVEN;
                        even.signal();
                    } else {
                        currState = ODD;
                        odd.signal();
                    }
                } finally {
                    lock.unlock();
                }

            } // for
        }

        public void even(IntConsumer printNumber) throws InterruptedException {
            for (int i = 2; i <= n; i += 2) {
                lock.lock();
                try {
                    if (currState != EVEN)
                        even.await();

                    printNumber.accept(i);
                    currState = ZERO;
                    zero.signal();
                } finally {
                    lock.unlock();
                }
            }
        }

        public void odd(IntConsumer printNumber) throws InterruptedException {
            for (int i = 1; i <= n; i += 2) {
                lock.lock();
                try {
                    if (currState != ODD)
                        odd.await();

                    printNumber.accept(i);
                    currState = ZERO;
                    zero.signal();
                } finally {
                    lock.unlock();
                }
            }
        }
    }
